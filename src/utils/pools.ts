import { keccak256, AbiCoder, solidityPacked } from 'ethers'
import { PoolKey } from '@premia/v3-sdk'
import { addresses } from '../constants'

const defaultAbiCoder = new AbiCoder()

export async function calculatePoolAddress(poolKey: PoolKey): Promise<string> {
	const args = defaultAbiCoder.encode(
		['address', 'address', 'address', 'address', 'uint256', 'uint256', 'bool'],
		[
			addresses.core.PremiaDiamond.address.toLowerCase(),
			poolKey.base.toLowerCase(),
			poolKey.quote.toLowerCase(),
			poolKey.oracleAdapter.toLowerCase(),
			poolKey.strike.toString().replace('n', ''),
			poolKey.maturity.toString().replace('n', ''),
			poolKey.isCallPool,
		],
	)

	const argsHash = keccak256(args)
	const bytecodeHash = keccak256(
		solidityPacked(['bytes', 'bytes'], [contractCreationCode, args]),
	)

	const hash = keccak256(
		solidityPacked(
			['bytes1', 'address', 'bytes32', 'bytes32'],
			[
				'0xff',
				addresses.core.PoolFactoryProxy.address.toLowerCase(),
				argsHash,
				bytecodeHash,
			],
		),
	)

	return `0x${hash.slice(-40)}`
}

const contractCreationCode =
	'0x60a060405234801561001057600080fd5b5060405161071f38038061071f83398101604081905261002f916104df565b6001600160a01b038781166080527f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546001600160a01b031990811633179091557fbbd6af8edd89d04327b00c29df7f272b9b1ae01bf6d9c54a784f935706df52eb8054821689841690811782557fbbd6af8edd89d04327b00c29df7f272b9b1ae01bf6d9c54a784f935706df52ec805484168a86161790557fbbd6af8edd89d04327b00c29df7f272b9b1ae01bf6d9c54a784f935706df52ed8054909316938816939093179091557fbbd6af8edd89d04327b00c29df7f272b9b1ae01bf6d9c54a784f935706df52f68590557fbbd6af8edd89d04327b00c29df7f272b9b1ae01bf6d9c54a784f935706df52ee8490556040805163313ce56760e01b815290519192600092909163313ce5679160048083019260209291908290030181865afa158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a69190610560565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610560565b60028401805461ffff60a01b1916600160a01b60ff8681169190910260ff60a81b191691909117600160a81b9184169190910217905560048401805460ff191686151517905590506102686005840166038d7ea4c680006102d3565b5061027e60058401670de0b6b3a76400006102d3565b5066038d7ea4c68000600f8401819055610297906102e6565b600890930192909255506102b590506301ffc9a760e01b6001610301565b6102c7636cdb3d1360e11b6001610301565b505050505050506105a8565b60006102df8383610377565b9392505050565b6000806102f8836402540be400610583565b90505b92915050565b6001600160e01b0319808316900361032c5760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60006102df838360006102df8361038e8184610396565b6000856103e7565b600081815260018301602052604090205481158015906103b4575080155b80156103c95750816103c68483610459565b14155b156102fb57604051630f71d89360e11b815260040160405180910390fd5b6000818103610409576040516305d4b02f60e31b815260040160405180910390fd5b6104138583610487565b610451575060008381526020858152604080832084905583835260018088018084528285208890558884528285208790558685529092529091208290555b949350505050565b6000818152602083905260409020548115801590610475575080155b80156103c95750816103c68483610396565b600081158015906102df57506000828152602084905260409020541515806102df57505060008080526001929092016020526040909120541490565b80516001600160a01b03811681146104da57600080fd5b919050565b600080600080600080600060e0888a0312156104fa57600080fd5b610503886104c3565b9650610511602089016104c3565b955061051f604089016104c3565b945061052d606089016104c3565b93506080880151925060a0880151915060c0880151801515811461055057600080fd5b8091505092959891949750929550565b60006020828403121561057257600080fd5b815160ff811681146102df57600080fd5b80820281158282048414176102fb57634e487b7160e01b600052601160045260246000fd5b60805161015d6105c26000396000607f015261015d6000f3fe6080604052600061000e61005c565b90506001600160a01b0381163b610038576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610057573d6000f35b3d6000fd5b6040516366ffd66360e11b8152600080356001600160e01b0319166004830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdffacc690602401602060405180830381865afa1580156100ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f291906100f7565b905090565b60006020828403121561010957600080fd5b81516001600160a01b038116811461012057600080fd5b939250505056fea2646970667358221220a6123cf249788a87a6403d8560820726e855223561c20f7763b1bc1b995958ad64736f6c634300081300330000000000000000000000002ea42642d1b951f18ea7fbce495bea9e517b198f00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000068bda63662b16550e86ad16160625eb293ac3d5f00000000000000000000000000000000000000000000005c283d4103941000000000000000000000000000000000000000000000000000000000000064e9b1000000000000000000000000000000000000000000000000000000000000000001'
